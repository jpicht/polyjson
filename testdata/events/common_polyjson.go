// Code generated by polyjson. DO NOT EDIT.
package events

import (
	"encoding/json"

	"github.com/jpicht/polyjson"
	"github.com/launchdarkly/go-jsonstream/v3/jwriter"
	"github.com/mailru/easyjson/jlexer"
)

type EventVisitor interface {
	VisitFailedLogin(FailedLogin)
	VisitLogin(Login)
	VisitLogout(Logout)
	VisitUpdateAttendance(UpdateAttendance)
}

type Event struct {
	// common data
	Common

	// implementations
	FailedLogin      *FailedLogin      `json:"failed_login,omitempty"`
	Login            *Login            `json:"login,omitempty"`
	Logout           *Logout           `json:"logout,omitempty"`
	UpdateAttendance *UpdateAttendance `json:"update_attendance,omitempty"`
}

type EventSlice []Event

func (ps *Event) Accept(v EventVisitor) bool {
	if ps.FailedLogin != nil {
		v.VisitFailedLogin(*ps.FailedLogin)
		return true
	}
	if ps.Login != nil {
		v.VisitLogin(*ps.Login)
		return true
	}
	if ps.Logout != nil {
		v.VisitLogout(*ps.Logout)
		return true
	}
	if ps.UpdateAttendance != nil {
		v.VisitUpdateAttendance(*ps.UpdateAttendance)
		return true
	}
	return false
}

func (pss EventSlice) Accept(v EventVisitor) bool {
	for _, e := range pss {
		if !e.Accept(v) {
			return false
		}
	}
	return true
}

func (ps *Event) WriteToJSONWriter(w *jwriter.Writer) {
	o := w.Object()
	defer o.End()

	// common fields from Common
	var (
		raw []byte
		err error
	)
	raw, err = json.Marshal(ps.Common.Time)
	o.Maybe("time", len(raw) > 0).Raw(raw)
	w.AddError(err)
	raw, err = json.Marshal(ps.Common.UserID)
	o.Maybe("user_id", len(raw) > 0).Raw(raw)
	w.AddError(err)
	raw, err = json.Marshal(ps.Common.ActualUserID)
	o.Maybe("actual_user_id", len(raw) > 0).Raw(raw)
	w.AddError(err)

	// implementations
	if ps.FailedLogin != nil {
		raw, err := json.Marshal(ps.FailedLogin)
		o.Maybe("failed_login", len(raw) > 0).Raw(raw)
		w.AddError(err)
	} else if ps.Login != nil {
		raw, err := json.Marshal(ps.Login)
		o.Maybe("login", len(raw) > 0).Raw(raw)
		w.AddError(err)
	} else if ps.Logout != nil {
		raw, err := json.Marshal(ps.Logout)
		o.Maybe("logout", len(raw) > 0).Raw(raw)
		w.AddError(err)
	} else if ps.UpdateAttendance != nil {
		raw, err := json.Marshal(ps.UpdateAttendance)
		o.Maybe("update_attendance", len(raw) > 0).Raw(raw)
		w.AddError(err)
	} else {
		w.AddError(polyjson.ErrNoValue)
	}
	// FIXME: additionals are not implemented yet
}

func (ps *Event) MarshalJSON() ([]byte, error) {
	w := jwriter.NewWriter()
	ps.WriteToJSONWriter(&w)
	return w.Bytes(), w.Error()
}

func (ps *Event) UnmarshalEasyJSON(in *jlexer.Lexer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}

	haveValue := false

	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		// implementations
		case "failed_login":
			if haveValue {
				in.AddError(polyjson.ErrMultipleValues)
			}
			haveValue = true
			ps.FailedLogin = new(FailedLogin)
			in.AddError(json.Unmarshal(in.Raw(), ps.FailedLogin))

		case "login":
			if haveValue {
				in.AddError(polyjson.ErrMultipleValues)
			}
			haveValue = true
			ps.Login = new(Login)
			in.AddError(json.Unmarshal(in.Raw(), ps.Login))

		case "logout":
			if haveValue {
				in.AddError(polyjson.ErrMultipleValues)
			}
			haveValue = true
			ps.Logout = new(Logout)
			in.AddError(json.Unmarshal(in.Raw(), ps.Logout))

		case "update_attendance":
			if haveValue {
				in.AddError(polyjson.ErrMultipleValues)
			}
			haveValue = true
			ps.UpdateAttendance = new(UpdateAttendance)
			in.AddError(json.Unmarshal(in.Raw(), ps.UpdateAttendance))

		// common fields from Common
		case "time":
			in.AddError(ps.Common.Time.UnmarshalJSON(in.Raw()))

		case "user_id":
			in.AddError(json.Unmarshal(in.Raw(), &ps.Common.UserID))

		case "actual_user_id":
			in.AddError(json.Unmarshal(in.Raw(), &ps.Common.ActualUserID))

		// unknown fields are disallowed
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}

	if !haveValue {
		in.AddError(polyjson.ErrNoValue)
	}
}

func (ps *Event) UnmarshalJSON(data []byte) error {
	l := &jlexer.Lexer{Data: data}
	ps.UnmarshalEasyJSON(l)
	return l.Error()
}

type EventDefaultVisitor struct{}

func (EventDefaultVisitor) VisitFailedLogin(FailedLogin)           {}
func (EventDefaultVisitor) VisitLogin(Login)                       {}
func (EventDefaultVisitor) VisitLogout(Logout)                     {}
func (EventDefaultVisitor) VisitUpdateAttendance(UpdateAttendance) {}

type (
	FailedLoginVisitorFunc      func(FailedLogin)
	LoginVisitorFunc            func(Login)
	LogoutVisitorFunc           func(Logout)
	UpdateAttendanceVisitorFunc func(UpdateAttendance)
)

type EventFuncVisitor struct {
	FailedLoginVisitorFunc      FailedLoginVisitorFunc
	LoginVisitorFunc            LoginVisitorFunc
	LogoutVisitorFunc           LogoutVisitorFunc
	UpdateAttendanceVisitorFunc UpdateAttendanceVisitorFunc
}

func (fv EventFuncVisitor) VisitFailedLogin(value FailedLogin) {
	if fv.FailedLoginVisitorFunc != nil {
		fv.FailedLoginVisitorFunc(value)
	}
}

func (fv EventFuncVisitor) VisitLogin(value Login) {
	if fv.LoginVisitorFunc != nil {
		fv.LoginVisitorFunc(value)
	}
}

func (fv EventFuncVisitor) VisitLogout(value Logout) {
	if fv.LogoutVisitorFunc != nil {
		fv.LogoutVisitorFunc(value)
	}
}

func (fv EventFuncVisitor) VisitUpdateAttendance(value UpdateAttendance) {
	if fv.UpdateAttendanceVisitorFunc != nil {
		fv.UpdateAttendanceVisitorFunc(value)
	}
}
