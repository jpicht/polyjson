package codegen

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"slices"

	"github.com/jpicht/polyjson/parser/att"
	"golang.org/x/exp/maps"
)

type OutputFile struct {
	*Context
	FileName   string
	Finalizers []func()
	buffer     *bytes.Buffer
	err        error
}

type OutputFileOption func(*OutputFile)

func WithGoFumpt() OutputFileOption {
	return func(of *OutputFile) {
		of.Finalizers = append(of.Finalizers, func() {
			log.Printf("running gofumpt on %q", of.FileName)
			of.AddError(exec.Command("gofumpt", "-w", of.FileName).Run())
		})
	}
}

func WithGoImports() OutputFileOption {
	return func(of *OutputFile) {
		of.Finalizers = append(of.Finalizers, func() {
			log.Printf("running goimports on %q", of.FileName)
			of.AddError(exec.Command("goimports", "-w", of.FileName).Run())
		})
	}
}

func WithGoFmt() OutputFileOption {
	return func(of *OutputFile) {
		of.Finalizers = append(of.Finalizers, func() {
			log.Printf("running go fmt on %q", of.FileName)
			of.AddError(exec.Command("go", "fmt", of.FileName).Run())
		})
	}
}

func (c *Config) NewOutputFile(filename string, p *att.Package, opts ...OutputFileOption) *OutputFile {
	buf := &bytes.Buffer{}
	of := &OutputFile{
		Context:  c.NewContext(p, buf),
		FileName: filename,
		buffer:   buf,
	}

	for _, opt := range c.OutputFileOptions {
		opt(of)
	}

	for _, opt := range opts {
		opt(of)
	}

	return of
}

func (o *OutputFile) AddError(err error) {
	if o.err == nil {
		o.err = err
	}
}

func (o *OutputFile) Error() error {
	return o.err
}

func (o *OutputFile) Close() error {
	if o.buffer.Len() == 0 {
		return nil
	}

	if err := o.write(); err != nil {
		return err
	}

	for _, f := range o.Finalizers {
		f()
	}

	return o.err
}

func (o *OutputFile) write() error {
	if o.err != nil {
		return o.err
	}

	of, err := os.Create(o.FileName)
	if err != nil {
		return err
	}
	defer of.Close()

	fmt.Fprintln(of, "// Code generated by polyjson. DO NOT EDIT.")
	fmt.Fprintf(of, "package %s\n\n", o.Context.Package.Name)
	fmt.Fprintf(of, "import (\n")

	pkgs := maps.Keys(o.Context.Imports)
	slices.Sort(pkgs)

	for _, pkgPath := range pkgs {
		if filepath.Base(pkgPath) == o.Context.Imports[pkgPath] {
			fmt.Fprintf(of, "\t%q\n", pkgPath)
			continue
		}
		fmt.Fprintf(of, "\t%s %q\n", o.Context.Imports[pkgPath], pkgPath)
	}
	fmt.Fprintf(of, ")\n\n")

	if err := errors.Join(o.err); err != nil {
		os.Remove(o.FileName)
		return err
	}

	_, err = io.Copy(of, o.buffer)

	return err
}
